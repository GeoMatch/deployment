on:
  workflow_call:
    inputs:
      version:
        required: true
        description: "GeoMatch version tag to build for (i.e. v0.0.1)."
        type: string
      terraform_directory:
        required: true
        description: "Terraform project directory (i.e. './terraform')"
        type: string
      terraform_env_vars_dir:
        required: true
        description: "A path to a directory relative to terraform_directory (i.e. './env/prod') for environment specific tfvars. Expects 'backend_config.tfvars' and 'env.tfvars'"
        type: string
      extra_terraform_args:
        required: false
        description: "Extra variables to pass to Terraform. (i.e. --var='varname=val'). Will be applied last"
        type: string
        default: ""

jobs:
  terraform-deploy:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.terraform_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_TERRAFORM_PLAN_ROLE_ARN }}
          role-session-name: ECSDeployTerraformPlan
          role-duration-seconds: 1000
      - name: Terraform Init
        run: terraform init -backend-config=${{ inputs.terraform_env_vars_dir }}/backend_config.tfvars
      - name: Terraform Plan
        run: >-
          terraform plan
          -var-file="${{ inputs.terraform_env_vars_dir }}/env.tfvars"
          -var="geomatch_version=${{ inputs.version }}"
          ${{ inputs.extra_terraform_args }}
          -out prod.plan
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_TERRAFORM_ECS_DEPLOY_ROLE_ARN }}
          role-session-name: ECSDeployTerraformApply
          role-duration-seconds: 1200
      - name: Terraform Apply
        run: terraform apply prod.plan
      - if: ${{ always() }}
        run: rm prod.plan || true
