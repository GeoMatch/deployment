on:
  workflow_call:
    inputs:
      build_args:
        required: false
        default: ""
        description: "A newline delimited (| in yaml) string of Docker build-args"
        type: string
      version:
        required: true
        description: "GeoMatch version tag to build for (i.e. v0.0.1)."
        type: string
      target:
        required: false
        description: "GeoMatch Dockerfile build target. If 'production', the latest tag will be used as well."
        default: "production"
        type: string
      skip_check:
        required: false
        description: "Skip check fo image"
        default: false 
        type: boolean

# TODO: gha Cache doesn't work for tags?
# https://github.com/docker/build-push-action/issues/433

env:
  GEOMATCH_VERSION: ${{ inputs.version }}
  # Frustrating workaround becuase we can't use secrets as inputs.
  # See https://stackoverflow.com/questions/73606841/github-actions-passing-secret-as-input-for-reusable-workflow
  DOCKER_BUILD_ARGS: |
    GEOMATCH_VERSION=${{ inputs.version }}
    CONTAINER_PORT=${{ secrets.AWS_GEOMATCH_ECR_CONTAINER_PORT }}
    ${{ secrets.GEOMATCH_DOCKER_BUILD_ARGS }}
    ${{ inputs.build_args }}

jobs:
  check:
    name: "Check If Container Already Exists"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      id-token: write
      contents: read
    outputs:
      already-built: ${{ steps.check.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_BUILD_ROLE_ARN }}
          role-session-name: ReleaseBuildCheck
          role-duration-seconds: 1000
      - name: Check If Container Is Already Built
        id: check
        run: |
          V=$( \
            aws ecr batch-get-image \
            --repository-name ${{ secrets.AWS_GEOMATCH_ECR_REPO_NAME }} \
            --image-ids=imageTag=${{ inputs.version }} \
            --query 'images[].imageId.imageTag' \
            --output text | tr -d '[:space:]' \
          )
          echo "built=$([[ $V == ${{ inputs.version }} ]] && echo true || echo false)" >> $GITHUB_OUTPUT
  build:
    name: "Build / Push Container"
    needs: [check]
    if: needs.check.outputs.already-built == 'false' || inputs.skip_check == true
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_BUILD_ROLE_ARN }}
          role-session-name: ReleaseBuild
          role-duration-seconds: 1000
      - name: Docker Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        # Creates alias of 'docker build' to 'docker buildx build'
        with:
          install: true
      # TODO: Change back to setup of commit 314fea7adcc6a6bccc41cf86ba98203a3d383d9b
      # once https://github.com/aws/containers-roadmap/issues/876 is resolved.
      # Also gha cache has 7 day expiry fyi
      - name: "Build '${{ inputs.target }}' image"
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: ${{ env.DOCKER_BUILD_ARGS }}
          tags: |
            "${{ secrets.AWS_GEOMATCH_ECR_REPO_URL }}:${{ inputs.version }}"
            "${{ secrets.AWS_GEOMATCH_ECR_REPO_URL }}:${{ inputs.target }}"
            ${{ inputs.target == 'production' && format('{0}:latest', secrets.AWS_GEOMATCH_ECR_REPO_URL) || '' }}
          target: ${{ inputs.target }}
          # output=type=registry
          # Not sure if cache-to a tagged image (see below) requires this or not,
          # so just kept it in
          push: true
          # NOT output=type=docker
          load: false
          cache-from: "type=registry,ref=${{ secrets.AWS_GEOMATCH_ECR_REPO_URL }}:${{ inputs.target }}-cache"
          cache-to: "mode=max,image-manifest=true,type=registry,ref=${{ secrets.AWS_GEOMATCH_ECR_REPO_URL }}:${{ inputs.target }}-cache"
